/*
The Problem

The Missionaries and Cannibals problem is a classic AI puzzle that can be defined as follows :

On one bank of a river are three missionaries and three cannibals.There is one boat available that
can hold up to two people and that they would like to use to cross the river.If the cannibals ever
outnumber the missionaries on either of the river¡¯s banks, the missionaries will get eaten.

How can the boat be used to safely carry all the missionaries and cannibals across the river ?
*/

#include <iostream>
#include <string>
#include <vector>

struct state
{
	int mLeft;
	int cLeft;
	int mRight;
	int cRight;
	bool side;
	std::string movs;
	state(int mL, int cL, int mR, int cR,  bool s, std::string mv) : mLeft(mL), cLeft(cL), mRight(mR), cRight(cR), side(s), movs(mv) {};
};

inline bool	is_safe_mov(const state& st)
{
	return (st.mLeft == 0 || st.mLeft >= st.cLeft) && (st.mRight == 0 || st.mRight >= st.cRight);
}

inline bool solution_found(const state& st)
{
	return (st.mLeft + st.cLeft<=2) && (st.side==false);
}

std::vector<state> get_avail_movs(const state& st, const std::vector<state>& used_states)
{
	std::vector<state> tempResults;

	if (st.side)
	{
		if (st.cRight >= 2)
			tempResults.emplace_back(st.mLeft, st.cLeft + 2, st.mRight, st.cRight - 2, !st.side, st.movs + " bb<- ");
		if (st.mRight >= 2)
			tempResults.emplace_back(st.mLeft + 2, st.cLeft, st.mRight - 2, st.cRight, !st.side, st.movs + " mm<- ");
		if (st.mRight >= 1 && st.cRight >= 1)
			tempResults.emplace_back(st.mLeft + 1, st.cLeft + 1, st.mRight - 1, st.cRight - 1, !st.side, st.movs + " mb<- ");
		if (st.cRight >= 1)
			tempResults.emplace_back(st.mLeft, st.cLeft + 1, st.mRight, st.cRight - 1, !st.side, st.movs + " b<- ");
		if (st.mRight >= 1)
			tempResults.emplace_back(st.mLeft + 1, st.cLeft, st.mRight - 1, st.cRight, !st.side, st.movs + " m<- ");
	}
	else
	{
		if (st.cLeft >= 1)
			tempResults.emplace_back(st.mLeft, st.cLeft - 1, st.mRight, st.cRight + 1, !st.side, st.movs + " b-> ");
		if (st.mLeft >= 1)
			tempResults.emplace_back(st.mLeft - 1, st.cLeft, st.mRight + 1, st.cRight, !st.side, st.movs + " m-> ");
		if (st.mLeft >= 1 && st.cRight >= 1)
			tempResults.emplace_back(st.mLeft - 1, st.cLeft - 1, st.mRight + 1, st.cRight + 1, !st.side, st.movs + " mb-> ");
		if (st.cLeft >= 2)
			tempResults.emplace_back(st.mLeft, st.cLeft - 2, st.mRight, st.cRight + 2, !st.side, st.movs + " bb-> ");
		if (st.mLeft >= 2)
			tempResults.emplace_back(st.mLeft - 2, st.cLeft, st.mRight + 2, st.cRight, !st.side, st.movs + " mm-> ");
	}
	std::vector<state> results;
	for (auto tr : tempResults)
	{
		if (!is_safe_mov(tr))
			continue;
		bool found = false;
		for (auto us : used_states)
		{
			if (tr.side == us.side && tr.mLeft == us.mLeft && tr.cLeft == us.cLeft)
				found = true;
		}
		if (!found)
			results.push_back(tr);
	}
	return results;
}

std::string find_solution(const state& cur_state, std::vector<state>& used_states)
{
	if (solution_found(cur_state))
	{
		std::string s = cur_state.movs;
		if (cur_state.mLeft == 2)
			s += " mm-> ";
		else if (cur_state.mLeft == 1 && cur_state.cLeft == 1)
			s += " mb-> ";
		else
			s += " bb-> ";
		return s;
	}
	else
	{
		used_states.push_back(cur_state);
		std::vector<state> avail_movs = get_avail_movs(cur_state, used_states);

		for (unsigned int i = 0; i < avail_movs.size(); ++i)
		{
			std::string solution = find_solution(avail_movs[i], used_states);
			if (solution == "No Solution")
				continue;
			else
				return solution;
		}
		return "No Solution";
	}
}

int main(void)
{
	const int num_missionaries = 3;
	const int num_cannibles = 3;
	//const int num_missionaries = 100;
	//const int num_cannibles = 99;

	if (num_missionaries < 0 || num_cannibles < 0 || (num_missionaries != 0 && num_missionaries < num_cannibles))
	{
		std::cout << "The number of missionaries and the number of cannibles must not be negative," << std::endl;
		std::cout << "and, the number of missionaries must not be less than the number of cannibles." << std::endl;
		return 1;
	}
	else if (num_missionaries + num_cannibles < 2)
	{
		if (num_missionaries)
			std::cout << " m";
		if (num_cannibles)
			std::cout << " b";
		std::cout << "-> " << std::endl;
	}
	else
	{
		std::vector<state> used_states;
		std::cout << find_solution(state(num_missionaries, num_cannibles, 0, 0, false, ""), used_states) << std::endl;
	}
	return 0;
}

